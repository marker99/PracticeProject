@page "/editRelationComponent/{Id:int}"

@using PracticeProject.Data
@using PracticeProject.Models
@using PracticeProject.Resources
@using Microsoft.Data.SqlClient
@using System.Diagnostics

@*<div class="container-fluid">
    <div class="row px-3">
        <div class="col-md-6 p-3">
            <EditForm Model="@_relation" OnValidSubmit="@UpdateRelation">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <h5>@StringResource.RelationInformation</h5>
                <div class="form-group">
                    <table class="border-bottom border-top border-dark m-2">
                        <tr>
                            <td class="p-1">Person 1 Id</td>
                            <td class="p-1">
                                <RadzenNumeric Disabled="true" ShowUpDown="false" @bind-Value="_relation.PersonId1"></RadzenNumeric>

                                <InputSelect class="form-select" @bind-Value="_newRelation.PersonId1">
                                @if (_newRelation.PersonId1 is null)
                                {
                                <option selected value="">None</option>
                                }
                                @foreach (var person in _persons)
                                {
                                <option value="@person.PersonId">@person.FirstName (ID: @person.PersonId)</option>
                                }
                                @if (_newRelation.PersonId1 is not null)
                                {
                                <option value="">None</option>
                                }
                                </InputSelect>
                            </td>
                        </tr>
                        <tr>
                            <td class="p-1">Relation</td>
                            <td class="p-1">
                                <InputText @bind-Value="_relation.RelationType" />
                            </td>
                        </tr>
                        <tr>
                            <td class="p-1">Person 2</td>
                            <td class="p-1">

                                <RadzenDropDown AllowClear="true" TValue="int?" Data="@_persons" TextProperty="FirstName" ValueProperty="PersonId" Change=@(args => OnChange(args, "1")) @bind-Value="@_relation.PersonId2" />

                                <InputSelect class="form-select" @bind-Value="_relation.PersonId2">
                                @if (_relation.PersonId2 is null)
                                {
                                <option selected value="">None</option>
                                }
                                @foreach (var person in _persons)
                                {
                                <option value="@person.PersonId">@person.FirstName (ID: @person.PersonId)</option>
                                }
                                </InputSelect>
                            </td>
                        </tr>
                    </table>

                    <div class="row ">
                        <div class="col-md-6 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton class="butto_green_colour" ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                        </div>
                    </div>

                </div>
            </EditForm>

        </div>
    </div>
</div>*@

<RadzenTemplateForm Data="@_relation" OnInvalidSubmit="@UpdateRelation">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container-fluid">
        <div class="row">
            <h3>Relation Information</h3>
            <div class="col-md-10">
                <RadzenFieldset>
                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Person 1 Name" />
                        </div>
                        <div class="col-md-7">
                            <RadzenDropDown Style="width: 100%" Disabled="true"  TValue="int?" Data="@_persons" TextProperty="FirstName" ValueProperty="PersonId" @bind-Value="@_relation.PersonId1" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="@StringResource.Relation" />
                        </div>
                        <div class="col-md-7">
                            <RadzenTextBox Style="width: 100%" @bind-Value="_relation.RelationType" Name="Relation" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3 align-items-center d-flex">
                            <RadzenLabel Text="Person 2 Name" />
                        </div>
                        <div class="col-md-7">
                            <RadzenDropDown Style="width: 100%" AllowClear="true" TValue="int?" Data="@_persons" TextProperty="FirstName" ValueProperty="PersonId" @bind-Value="@_relation.PersonId2" />
                        </div>
                    </div>
                </RadzenFieldset>

            </div>
            <div class="row ">
                <div class="col-md-10 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton class="butto_green_colour" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Click="@UpdateRelation" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                </div>
            </div>
        </div>
    </div>
</RadzenTemplateForm>

@code {

    #region Injections

    [Inject]
    private NavigationManager _navigationManager { get; set; }
    [Inject]
    private IPersonHandler _personHandler { get; set; }
    [Inject]
    private IRelationHandler _relationHandler { get; set; }

    #endregion

    [Parameter]
    public int RelationId { get; set; }

    //private Person _person;
    private IEnumerable<Person> _persons = Enumerable.Empty<Person>();
    //private IEnumerable<Relation> _relations = Enumerable.Empty<Relation>();

    private Relation _relation;

    protected override async Task OnInitializedAsync()
    {
        //_person = new();
        _relation = new Relation();

        _persons = await _personHandler.GetAllPersons();
        //_relations = await _relationHandler.GetAllRelations();
        _relation = await _relationHandler.GetRelationById(RelationId);

    }

    public async Task UpdateRelation()
    {
        await _relationHandler.UpdateRelation(_relation);
        _navigationManager.NavigateTo("/family");
    }

    public void OnChange(object value, string name)
    {
        Debug.WriteLine($"{name} value changed to {_relation.PersonId2}");
    }

    public void Cancel()
    {
        _navigationManager.NavigateTo("/family");
    }
}